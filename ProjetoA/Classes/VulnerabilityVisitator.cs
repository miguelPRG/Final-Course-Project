using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml.Shapes;
using Microsoft.CodeAnalysis;
using Windows.System;
using Windows.UI.Xaml.Controls;
using System.Runtime.CompilerServices;

namespace ProjetoA.Classes
{
    public enum NivelRisco
    {
        Nenhum,
        Baixo,
        Medio,
        Alto
    }


    public class VulnerabilidadeVisitor : CSharpSyntaxWalker
    {
        bool methodCounter;

        private List<(string Tipo, int Linha, SyntaxNode Node, string NivelRisco)> vulnerabilidadesEncontradas;

        public VulnerabilidadeVisitor()
        {
            vulnerabilidadesEncontradas = new List<(string, int, SyntaxNode, string)>();
            methodCounter = false;
        }

        private void AdicionarVulnerabilidade(string tipo, Location location, SyntaxNode node, NivelRisco nivelRisco)
        {   
            var linha = location.GetLineSpan().StartLinePosition.Line + 1;
            vulnerabilidadesEncontradas.Add((tipo, linha, node, nivelRisco.ToString()));
        }

        public List<(string Tipo, int Linha, SyntaxNode Node, string NivelRisco)> GetVulnerabilidadesEncontradas()
        {
            return vulnerabilidadesEncontradas;
        }

        private NivelRisco RiskLevel(int palavrasChaveEncontradas)
        {
            if (palavrasChaveEncontradas >= 3)
            {
                // Se mais de 3 palavras-chave são encontradas, consideramos como Elevado risco
                return NivelRisco.Alto;
            }
            else if (palavrasChaveEncontradas > 2)
            {
                // Se pelo menos 1 palavra-chave é encontrada, consideramos como Moderado risco
                return NivelRisco.Medio;
            }
            else if (palavrasChaveEncontradas > 1)
            {
                // Não foram encontradas palavras-chave de Injeção SQL, consideramos como Baixo risco
                return NivelRisco.Baixo;
            }

            else return NivelRisco.Nenhum;
        }

        int VerificarPadroes(Dictionary<string,int> palavrasChave,string []value)
        {
            int palavrasChaveEncontradas = 0;

            foreach (string p in value)
            {
                if(palavrasChave.ContainsKey(p))
                {
                    palavrasChave[p]++;
                }
            }

            foreach(var chave in palavrasChave.Keys)
            {
                palavrasChaveEncontradas += palavrasChave[chave];
            }

            return palavrasChaveEncontradas;
        }

        private bool ContemPadraoInjecaoSQL(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> palavrasChaveInjecaoSQL = new Dictionary<string, int>
                {
                    {"select", 0},
                    {"insert", 0},
                    {"update", 0},
                    {"delete", 0},
                    {"drop", 0},
                    {"union", 0},
                    {"where", 0},
                    {"from", 0},
                    {"and", 0},
                    {"or", 0},
                    {"exec",0},
                    {"alter",0 }
                };            

            nivelRisco = RiskLevel(VerificarPadroes(palavrasChaveInjecaoSQL,value));

            return nivelRisco >= NivelRisco.Baixo;
        }

        //LEMBRETE: O Stor recomendou Client DOM Stored XSS & Client Potential XSS

        private bool ContemPadraoXSS(string []value, out NivelRisco nivelRisco)
        {
            // Procura por padrões típicos de XSS, como tags de script
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "<script>",0},
                { "javascript:",0},
                { "onerror=",0},
                { "onload=",0},
                { "onclick=",0 }
            
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemPadraoHardcodeedPassword(string []value ,out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "123456",0},
                { "qwerty", 0 },
                { "password", 0 },
                { "000000", 0 },
                { "abc123", 0 },
                { "111111", 0 },
                { "123123", 0 },
                { "benfica", 0 },
                {"sporting",0 },
                {"porto",0 }
            
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));

            return nivelRisco >= NivelRisco.Baixo;

        }

        private bool ContemPadraoUnsafeTargetBlank(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            { 
                { "target=[\"']_blank[\"']", 0 }, 
                { "rel=[\"']noopener[\"']", 0 },
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));

            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemUnprotectedCookie(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave =  new Dictionary<string, int>
            {
                { "document.cookie",0 }, 
                { "response.cookies", 0 }, 
                { "request.cookies", 0 }, 
                { "set-cookie", 0 } 
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));

            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemMissingCSPHeader(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
               { "content-security-policy", 0 },
               { "-csp", 0 },
               { "header-", 0 }
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));

            return nivelRisco >= NivelRisco.Baixo;
        }
        
        private bool ContemClientUseOfIframeWithoutSandbox(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "<iframe ",0 },
                {"\\s+[^>]*>",0 }

            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave,value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemClientJQueryDeprecatedSymbols(string []value, out NivelRisco nivelRisco)
        {
            // Patrones que podrían indicar el uso de símbolos de jQuery obsoletos o en desuso
            Dictionary<string, int> padroesChave = new Dictionary<string, int>
            {
                { ".bind(", 0 },
                { ".live(", 0 },
                { ".delegate(", 0 },
                { ".attr('selected', true)", 0 },
                { ".on(", 0 },
                { ".off(", 0 },
                { ".toggle(", 0 },
                { ".hover(", 0 },
                { ".blur(", 0 },
                { ".focus(", 0 },
                { ".submit(", 0 },
                { ".reset(", 0 },
                { ".change(", 0 },
                { ".load(", 0 },
                { ".error(", 0 },
                { ".unload(", 0 },
                { ".slideDown(", 0 },
                { ".slideUp(", 0 },
                { ".slideToggle(", 0 },
                { ".fadeIn(", 0 },
                { ".fadeOut(", 0 },
                { ".fadeToggle(", 0 },
                { ".animate(", 0 },
                { ".stop(", 0 },
                { ".delay(", 0 },
                { ".size(", 0 },
                { ".andSelf(", 0 },
                { ".context(", 0 },
                { ".end(", 0 },
                { ".serialize(", 0 },
                { ".serializeArray(", 0 }
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemClientHardcodedDomain(string []value,out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "http://example.com", 0 },
                { "https://example.com", 0 },
                { "http://sub.example.com", 0 },
                { "https://sub.example.com", 0 },
                { "https://localhost.com", 0 },
                { "http://localhost.com", 0 },
                { "http://testdomain.com", 0 },
                { "https://testdomain.com", 0 },
                { "http://sub.testdomain.com", 0 },
                { "https://sub.testdomain.com", 0 },
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemClientDOMOpenRedirect(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "window.location", 0 },
                { "document.location", 0 },
                { "window.location.href", 0 },
                { "document.location.href", 0 },
                { "window.location.assign", 0 },
                { "document.location.assign", 0 },
                { "window.location.replace", 0 },
                { "document.location.replace", 0 },
                { "window.location.reload", 0 },
                { "document.location.reload", 0 },
                { "window.open", 0 },
                { "location.href", 0 },
                { "location.assign", 0 },
                { "location.replace", 0 },
                { "location.reload", 0 },
                { "location", 0 },
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemUseofHardCodedCryptographicKey(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "aes.create", 0 },
                { "new symmetricalgorithm()", 0 },
                { "new aescryptoserviceprovider()", 0 },
                { "des.create", 0 },
                { "new rsacryptoserviceprovider()", 0 },
                { "new tripledescryptoserviceprovider()", 0 }, // Padrão para TripleDES
                { "new md5crypto", 0 }, // Padrão para MD5
                { "new sha1crypto", 0 }, // Padrão para SHA-1
                { "new sha256crypto", 0 }, // Padrão para SHA-256
                { "new sha512crypto", 0 }, // Padrão para SHA-512
                { "new hmacsha1", 0 }, // Padrão para HMAC-SHA1
                { "new hmacsha256", 0 }, // Padrão para HMAC-SHA256
                { "new hmacsha512", 0 } // Padrão para HMAC-SHA512
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemPrivacyViolation(string []value, out NivelRisco nivelRisco)
        {
           Dictionary<string,int> padroesChave = new Dictionary<string, int>
           {
               { "username", 0 },
               { "password", 0 },
               { "credit card", 0 },
               { "social security", 0 },
               { "personal information", 0 },
               { "email", 0 },
               { "phone number", 0 },
               { "address", 0 },
               { "birthdate", 0 },
               { "driver's license", 0 },
               { "passport", 0 },
               { "bank account", 0 },
               { "security question", 0 },
               { "mother's maiden name", 0 },
           };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave,value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemPathTraversal(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "../", 0 },
                { "..\\", 0 },
                { "/../", 0 },
                { "\\..\\", 0 },
                { "./", 0 },
                { ".\\", 0 },
                { "%2e%2e\\", 0 },    // URL-encoded representation of ..\
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemMissingHSTSHeader(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "strict-transport-security", 0 },
                { "hsts", 0 },
                { "includesubdomains", 0 },
                { "max-age", 0 },
                { "preload", 0 },
                { "nosniff", 0 },
                { "nopins", 0 },
                { "redirect-to-https", 0 },
                { "public-key-pins", 0 },
        // Adicione mais padrões conforme necessário
                { "content-security-policy", 0 },
                { "referrer-policy", 0 },
                { "x-frame-options", 0 },
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemHttpOnlyCookies(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>{

                { "document.cookie", 0 },
                { "response.cookies", 0 },
                { "request.cookies", 0 },
                { "set-cookie", 0 },
                { "httponly", 0 },
                { "httponly=", 0 },
                { "cookie.sethttponly", 0 },
                { "server.setcookiehttponly", 0 },
                { "secure;httponly", 0 },
                { "cookie_httponly", 0 },
                { "cookie.setattribute('httponly')", 0 },
                { "http-only", 0 },  // Padrão alternativo para 'httponly'
                { "cookiehttponly", 0 },  // Padrão alternativo para 'httponly'
                { "httponlycookie", 0 },  // Padrão alternativo para 'httponly'
                { "cookieattributes", 0 },
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemCSRF(string []value,out NivelRisco nivelRisco)
        {
            Dictionary<string,int> padroesChave = new Dictionary<string, int>
            {
                { "__requestverificationtoken",0 }, 
                { "antiforgery", 0 }, 
                { "csrf", 0 },
                { "antiforgerytoken", 0 },
                { "requestverificationtoken", 0 }, 
                { "xsrf", 0 }, 
             };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave,value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemLogForging(string []value,out NivelRisco nivelRisco)
        {
            Dictionary<string, int> padroesChave = new Dictionary<string, int>
            {
                 { "syslog", 0 },
                 { "logger", 0 },
                 { "log4j", 0 },
                 { "logback", 0 },
                 { "log injection", 0 },
                 { "file.log", 0 },
                 { "log(" , 0 },
                 { "printStackTrace", 0 },
                 { "java.util.logging", 0 },
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        private bool ContemHeapInspection(string []value, out NivelRisco nivelRisco)
        {
            Dictionary<string, int> padroesChave = new Dictionary<string, int>
            {
                { "malloc", 0 },
                { "free", 0 },
                { "new ", 0 },  // Note o espaço após "new" para evitar falsos positivos
                { "delete", 0 },
                { "calloc", 0 },
                { "realloc", 0 },
                { "heapalloc", 0 },
                { "heapfree", 0 },
                { "globalalloc", 0 },
                { "globalfree", 0 },
            };

            nivelRisco = RiskLevel(VerificarPadroes(padroesChave, value));
            return nivelRisco >= NivelRisco.Baixo;
        }

        public override void VisitLiteralExpression(LiteralExpressionSyntax node)
        {
            NivelRisco nivel;

            string valorEmMinusculas = node.ToString().ToLower();
            string[] palavras = valorEmMinusculas.Split(new[] { ' ', '\t', '\n', '\r', '(', ')', ',', ';', '.', '\"', '\'' }, StringSplitOptions.RemoveEmptyEntries);

            if (ContemPadraoInjecaoSQL(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Injeção SQL", node.GetLocation(), node, nivel);
            }

            if (ContemPadraoXSS(palavras, out nivel))
            {
                AdicionarVulnerabilidade("XSS", node.GetLocation(), node, nivel);
            }

            if (ContemPadraoHardcodeedPassword(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Passwords Fracas", node.GetLocation(), node, nivel);
            }

            if(ContemPadraoUnsafeTargetBlank(palavras,out nivel))
            {
                AdicionarVulnerabilidade("Uso indevido do Target Blanl", node.GetLocation(), node, nivel);
            }

            if (ContemUnprotectedCookie(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Cookies não protegidas", node.GetLocation(), node, nivel);
            }

            if (ContemMissingCSPHeader(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Falta cabeçalho CSP", node.GetLocation(), node, nivel);
            }

            if (ContemClientUseOfIframeWithoutSandbox(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Uso do cliente de <iframe> sem sandbox", node.GetLocation(), node, nivel);
            }

            if (ContemClientJQueryDeprecatedSymbols(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Símbolos obsoletos do cliente jQuery", node.GetLocation(), node, nivel);
            }

            if (ContemClientHardcodedDomain(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Domínio codificado do cliente", node.GetLocation(), node, nivel);
            }

            if (ContemClientDOMOpenRedirect(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Redirecionamento aberto do DOM do cliente", node.GetLocation(), node, nivel);
            }

            if (ContemUseofHardCodedCryptographicKey(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Uso de chave criptográfica codificada", node.GetLocation(), node, nivel);
            }

            if (ContemPrivacyViolation(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Violação de Privacidade", node.GetLocation(), node, nivel);
            }

            if (ContemPathTraversal(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Travessia de Caminho", node.GetLocation(), node, nivel);
            }

            if (ContemMissingHSTSHeader(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Falta o cabeçalho HSTS", node.GetLocation(), node, nivel);
            }

            if(ContemHttpOnlyCookies(palavras, out nivel))
            {
                AdicionarVulnerabilidade("Cookies só de http", node.GetLocation(), node, nivel);
            }

            if(ContemCSRF(palavras,out nivel))
            {
                AdicionarVulnerabilidade("Vulnerabilidade CSRF", node.GetLocation(), node, nivel);
            }

            if(ContemLogForging(palavras,out nivel))
            {
                AdicionarVulnerabilidade("Log Forging", node.GetLocation(), node, nivel);
            }

            if(ContemHeapInspection(palavras,out nivel))
            {
                AdicionarVulnerabilidade("Heap Inspection", node.GetLocation(), node, nivel);
            }

            base.VisitLiteralExpression(node);
        }
    }
}